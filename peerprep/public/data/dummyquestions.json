[
  {
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.",
    "category": ["Array", "Hash Table"],
    "difficulty": "1",
    "test_cases": {
      "input": "[2, 7, 11, 15], target = 9",
      "output": "[0, 1]"
    }
  },
  {
    "id": 2,
    "title": "Reverse Linked List",
    "description": "Reverse a singly linked list and return the reversed list.",
    "category": ["Linked List"],
    "difficulty": "1",
    "test_cases": {
      "input": "[1, 2, 3, 4, 5]",
      "output": "[5, 4, 3, 2, 1]"
    }
  },
  {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "description": "Find the length of the longest substring without repeating characters.",
    "category": ["String", "Sliding Window"],
    "difficulty": "2",
    "test_cases": {
      "input": "\"abcabcbb\"",
      "output": "3"
    }
  },
  {
    "id": 4,
    "title": "Merge Intervals",
    "description": "Merge all overlapping intervals and return an array of the non-overlapping intervals.",
    "category": ["Array", "Sorting"],
    "difficulty": "2",
    "test_cases": {
      "input": "[[1,3],[2,6],[8,10],[15,18]]",
      "output": "[[1,6],[8,10],[15,18]]"
    }
  },
  {
    "id": 5,
    "title": "Trapping Rain Water",
    "description": "Given n non-negative integers representing an elevation map, compute how much water it can trap after raining.",
    "category": ["Array", "Two Pointers"],
    "difficulty": "3",
    "test_cases": {
      "input": "[0,1,0,2,1,0,1,3,2,1,2,1]",
      "output": "6"
    }
  },
  {
    "id": 6,
    "title": "Word Break",
    "description": "Given a string s and a dictionary of words, return true if s can be segmented into a space-separated sequence of dictionary words.",
    "category": ["Dynamic Programming", "String"],
    "difficulty": "2",
    "test_cases": {
      "input": "\"leetcode\", wordDict = [\"leet\", \"code\"]",
      "output": "true"
    }
  },
  {
    "id": 7,
    "title": "Binary Tree Inorder Traversal",
    "description": "Given a binary tree, return the inorder traversal of its nodes' values.",
    "category": ["Tree"],
    "difficulty": "1",
    "test_cases": {
      "input": "[1,null,2,3]",
      "output": "[1, 3, 2]"
    }
  },
  {
    "id": 8,
    "title": "Find Median from Data Stream",
    "description": "The median is the middle value in an ordered integer list. Implement a data structure that efficiently supports finding the median.",
    "category": ["Heap"],
    "difficulty": "3",
    "test_cases": {
      "input": "[[1], [2], [3]]",
      "output": "2"
    }
  },
  {
    "id": 9,
    "title": "Kth Largest Element in an Array",
    "description": "Find the Kth largest element in an unsorted array.",
    "category": ["Array", "Sorting"],
    "difficulty": "2",
    "test_cases": {
      "input": "[3,2,1,5,6,4], k = 2",
      "output": "5"
    }
  },
  {
    "id": 10,
    "title": "Coin Change",
    "description": "Given different denominations of coins, compute the fewest number of coins needed to make up a given amount.",
    "category": ["Dynamic Programming"],
    "difficulty": "2",
    "test_cases": {
      "input": "[1, 2, 5], amount = 11",
      "output": "3"
    }
  }
]
